{
  "version": 3,
  "sources": ["../lib/dger.js", "../lib/ndarray.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable */ // FIXME\n\n'use strict';\n\n// MAIN //\n\n/**\n* Performs the rank 1 operation `A = alpha*x*y^T + A`.\n*\n* @param {*} order - storage layout\n* @param {NonNegativeInteger} M - number of rows in the matrix `A`\n* @param {NonNegativeInteger} N - number of columns in the matrix `A`\n* @param {number} alpha - scalar constant\n* @param {Float64Array} x - an `M` element vector\n* @param {integer} strideX - `x` stride length\n* @param {Float64Array} y - an `N` element vector\n* @param {integer} strideY - `y` stride length\n* @param {Float64Array} A - matrix of coefficients\n* @param {PositiveInteger} LDA - stride of the first dimension of `A` (a.k.a., leading dimension of the matrix `A`)\n* @returns {Float64Array} `A`\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* var M = 4;\n* var N = 3;\n*\n* var B = new Float64Array( M*N );\n*\n* var x = new Float64Array( [ 0.0, 1.0, 2.0, 3.0 ] );\n* var y = new Float64Array( [ 1.0, 4.0, 0.0 ] );\n*\n* dger( 'row-major', N, M, 1.0, y, 1, x, 1, B, M );\n* // B => <Float64Array>[ 0.0, 1.0, 2.0, 3.0, 0.0, 4.0, 8.0, 12.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\nfunction dger( order, M, N, alpha, x, strideX, y, strideY, A, LDA ) {\n\t// TODO: implementation\n\n\treturn A;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dger;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable */ // FIXME\n\n'use strict';\n\n// MAIN //\n\n/**\n* Performs the rank 1 operation `A = alpha*x*y^T + A`.\n*\n* @param {*} order - storage layout\n* @param {NonNegativeInteger} M - number of rows in the matrix `A`\n* @param {NonNegativeInteger} N - number of columns in the matrix `A`\n* @param {number} alpha - scalar constant\n* @param {Float64Array} x - an `M` element vector\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {Float64Array} y - an `N` element vector\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @param {Float64Array} A - matrix of coefficients\n* @param {PositiveInteger} LDA - stride of the first dimension of `A` (a.k.a., leading dimension of the matrix `A`)\n* @returns {Float64Array} `A`\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* var M = 4;\n* var N = 3;\n*\n* var B = new Float64Array( M*N );\n*\n* var x = new Float64Array( [ 0.0, 1.0, 2.0, 3.0 ] );\n* var y = new Float64Array( [ 1.0, 4.0, 0.0 ] );\n*\n* dger( 'row-major', N, M, 1.0, y, 1, 0, x, 1, 0, B, M );\n* // B => <Float64Array>[ 0.0, 1.0, 2.0, 3.0, 0.0, 4.0, 8.0, 12.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\nfunction dger( order, M, N, alpha, x, strideX, offsetX, y, strideY, offsetY, A, LDA ) {  \n\n\t// TODO: implementation\n\n\treturn A;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dger;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar dger = require( './dger.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( dger, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = dger;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* BLAS level 2 routine to perform the rank 1 operation `A = alpha*x*y^T + A`.\n*\n* @module @stdlib/blas-base-dger\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var dger = require( '@stdlib/blas-base-dger' );\n*\n* var M = 4;\n* var N = 3;\n*\n* var B = new Float64Array( M*N );\n*\n* var x = new Float64Array( [ 0.0, 1.0, 2.0, 3.0 ] );\n* var y = new Float64Array( [ 1.0, 4.0, 0.0 ] );\n*\n* dger( 'row-major', N, M, 1.0, y, 1, x, 1, B, M );\n* // B => <Float64Array>[ 0.0, 1.0, 2.0, 3.0, 0.0, 4.0, 8.0, 12.0, 0.0, 0.0, 0.0, 0.0 ]\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var dger = require( '@stdlib/blas-base-dger' );\n*\n* var M = 4;\n* var N = 3;\n*\n* var B = new Float64Array( M*N );\n*\n* var x = new Float64Array( [ 0.0, 1.0, 2.0, 3.0 ] );\n* var y = new Float64Array( [ 1.0, 4.0, 0.0 ] );\n*\n* dger.ndarray( 'row-major', N, M, 1.0, y, 1, 0, x, 1, 0, B, M );\n* // B => <Float64Array>[ 0.0, 1.0, 2.0, 3.0, 0.0, 4.0, 8.0, 12.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nvar tryRequire = require( '@stdlib/utils-try-require' );\nvar isError = require( '@stdlib/assert-is-error' );\nvar main = require( './main.js' );\n\n\n// MAIN //\n\nvar dger;\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( isError( tmp ) ) {\n\tdger = main;\n} else {\n\tdger = tmp;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dger;\n\n// exports: { \"ndarray\": \"dger.ndarray\" }\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAqDA,SAASC,EAAMC,EAAOC,EAAGC,EAAGC,EAAO,EAAGC,EAASC,EAAGC,EAASC,EAAGC,EAAM,CAGnE,OAAOD,CACR,CAKAT,EAAO,QAAUC,IC9DjB,IAAAU,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAuDA,SAASC,EAAMC,EAAOC,EAAGC,EAAGC,EAAO,EAAGC,EAASC,EAASC,EAAGC,EAASC,EAASC,EAAGC,EAAM,CAIrF,OAAOD,CACR,CAKAX,EAAO,QAAUC,ICjEjB,IAAAY,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAc,QAAS,uDAAwD,EAC/EC,EAAO,IACPC,EAAU,IAKdF,EAAaC,EAAM,UAAWC,CAAQ,EAKtCH,EAAO,QAAUE,ICwBjB,IAAIE,EAAO,QAAS,MAAO,EAAE,KACzBC,EAAa,QAAS,2BAA4B,EAClDC,EAAU,QAAS,yBAA0B,EAC7CC,EAAO,IAKPC,EACAC,EAAMJ,EAAYD,EAAM,UAAW,aAAc,CAAE,EAClDE,EAASG,CAAI,EACjBD,EAAOD,EAEPC,EAAOC,EAMR,OAAO,QAAUD",
  "names": ["require_dger", "__commonJSMin", "exports", "module", "dger", "order", "M", "N", "alpha", "strideX", "y", "strideY", "A", "LDA", "require_ndarray", "__commonJSMin", "exports", "module", "dger", "order", "M", "N", "alpha", "strideX", "offsetX", "y", "strideY", "offsetY", "A", "LDA", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "dger", "ndarray", "join", "tryRequire", "isError", "main", "dger", "tmp"]
}
